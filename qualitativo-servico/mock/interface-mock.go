// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_qualitativo is a generated GoMock package.
package mock_qualitativo

import (
	context "context"
	qualitativo "git.sof.intra/siop/qualitativo-servico"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Classificacoes mocks base method
func (m *MockService) Classificacoes(ctx context.Context, exercicio int32, classificacoesCodificadas []string) ([]*qualitativo.Classificacao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Classificacoes", ctx, exercicio, classificacoesCodificadas)
	ret0, _ := ret[0].([]*qualitativo.Classificacao)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Classificacoes indicates an expected call of Classificacoes
func (mr *MockServiceMockRecorder) Classificacoes(ctx, exercicio, classificacoesCodificadas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Classificacoes", reflect.TypeOf((*MockService)(nil).Classificacoes), ctx, exercicio, classificacoesCodificadas)
}

// Localizadores mocks base method
func (m *MockService) Localizadores(ctx context.Context, filtro *qualitativo.FiltroLocalizador, fetch *qualitativo.FetchLocalizador, n int32) ([]*qualitativo.Localizador, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Localizadores", ctx, filtro, fetch, n)
	ret0, _ := ret[0].([]*qualitativo.Localizador)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Localizadores indicates an expected call of Localizadores
func (mr *MockServiceMockRecorder) Localizadores(ctx, filtro, fetch, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Localizadores", reflect.TypeOf((*MockService)(nil).Localizadores), ctx, filtro, fetch, n)
}

// Decodificar mocks base method
func (m *MockService) Decodificar(ctx context.Context, classificacoesCodificadas []string) ([]qualitativo.Classificacao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decodificar", ctx, classificacoesCodificadas)
	ret0, _ := ret[0].([]qualitativo.Classificacao)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decodificar indicates an expected call of Decodificar
func (mr *MockServiceMockRecorder) Decodificar(ctx, classificacoesCodificadas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decodificar", reflect.TypeOf((*MockService)(nil).Decodificar), ctx, classificacoesCodificadas)
}
