{{$daemonset := default dict .Values.daemonset}}
{{- $namespace := .Release.Namespace -}}
{{if $daemonset.create }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "template.fullname" . }}-daemonset
spec:
  selector:
    matchLabels:
      {{- include "template.selectorLabelsDaemonset" . | nindent 6 }}
      {{- with .Values.daemonset.labels }}
        {{- toYaml . | nindent 6  }}
      {{- end}}
  template:
    metadata:
      labels:
        {{- $labels := default dict .Values.daemonset.labels}}
        {{- if not $labels.logging}}
        logging: {{true | quote}}
        logRetencao: {{"7dias"}}
        {{- end}}
        {{- include "template.podLabelsDaemonset" . | nindent 8 }}
        {{- with .Values.daemonset.labels }}
          {{- toYaml . | nindent 8  }}
        {{- end}}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "template.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}-daemonset
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
           {{- range .Values.image.env }}
             - name: {{ .name }}
               value: {{ .value | quote }}
           {{- end }}
          envFrom:
           {{- include "template.envFrom" . | nindent 12 }}
           {{- range .Values.image.envFrom }}
              {{- if eq .type "configmap" }}
            - configMapRef:
                name: {{ .name }}
              {{- end }}
              {{- if eq .type "secret" }}
            - secretRef:
                name: {{ .name }}
              {{- end }}
           {{- end }}
          ports:
            {{- range .Values.daemonset.ports }}
            - name: port-{{ .port }}
              containerPort: {{ .port }}
              hostPort: {{ .hostPort }}
              protocol: TCP
            {{- end}}
          volumeMounts:
          {{- range .Values.volumes }}
          - mountPath: {{ .mountPath | quote }}
            name: {{ .name }}
          {{- end}}
      volumes:
    {{- range .Values.volumes }}
    {{- if eq .type "secret" }}
      - name: {{ .name }}
        secret:
          secretName: {{ .secretName }}
    {{- end }}
    {{- if eq .type "configmap" }}
      - name: {{ .name }}
        configMap:
          name: {{ .configMapName }}
    {{- end }}
    {{- if eq .type "hostPath" }}
      - name: {{ .name }}
        hostPath:
          path: {{ .hostPath }}
    {{- end }}
    {{- if eq .type "downwardAPI" }}
      - name: {{ .name }}
        downwardAPI:
          items:
            {{- toYaml .items | nindent 10}}
    {{- end }}
    {{- if eq .type "pvc" }}
      - name: {{ .name }}
        persistentVolumeClaim:
          claimName: {{ .pvcName }}
    {{- end }}
    {{- if eq .type "nfs-arquivoanexo" }}
      - name: {{ .name }}
        nfs:
          server: {{ .server }}
        {{- if eq $namespace "production" }}
          path: /siop/Producao/arquivoanexo
        {{- else }}
          path: {{ .path }}
        {{- end }}
    {{- end }}
    {{- end }}
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
{{ end }}
